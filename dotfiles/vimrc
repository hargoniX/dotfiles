let mapleader = "\<Space>"
call plug#begin('~/.vim/plugged')
" Surround
Plug 'tpope/vim-surround'

" Colorscheme
" Plug 'morhetz/gruvbox'
Plug 'arcticicestudio/nord-vim'

" Automatically switch indent config
Plug 'tpope/vim-sleuth'

" Giiiiit
Plug 'tpope/vim-fugitive'
Plug 'rbong/vim-flog'
Plug 'airblade/vim-gitgutter'

" Fuzzy finder
Plug 'ctrlpvim/ctrlp.vim'

" Tmux navigation!
Plug 'christoomey/vim-tmux-navigator'

" Language server
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'

" Language specific config
" Rust
Plug 'rust-lang/rust.vim', { 'for': 'rust' }

" Ruby
Plug 'tpope/vim-endwise', { 'for': 'ruby' }
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'tpope/vim-rails', { 'for': 'ruby' }

call plug#end()

" General settings
source ~/.vim/local-settings.vim
behave xterm
syntax enable
set nocompatible
set autoindent
set smarttab
set textwidth=120
set expandtab
set nowrap
set showfulltag
set undolevels=1000
set history=200
set showmatch
set noswapfile
set backspace=indent,eol,start
set noautowrite
set nobackup
set ruler
set relativenumber
set number
set laststatus=2
set ignorecase
set whichwrap=b,s,h,l,<,>,[,]
set hlsearch
set foldmethod=indent
set foldlevel=99
set autoread

set encoding=utf-8
set termencoding=utf-8
set fileencodings=ucs-bom,ascii,utf-8,latin1

filetype on
filetype plugin on
filetype indent plugin on

" colorscheme
" colorscheme gruvbox
colorscheme nord
set background=dark

" transparency
hi Normal guibg=NONE ctermbg=NONE

" line limit column
set colorcolumn=80

" highlight current line
set cursorline

" show whitespaces / tabs
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+\%#\@<!$/

" Change cursor shape in different modes
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Netrw config
let g:netrw_banner = 0
let g:netrw_browse_split = 0

autocmd StdinReadPre * let s:std_in=1
" automatically open netrw when no file is specified
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Ex | endif
" automatically open netrw when opening a directory
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Ex | endif

" open netrw
nmap <leader>nv :Vex<CR>
nmap <leader>nh :Hex<CR>

" Git mappings
autocmd BufWritePost * GitGutter
command -nargs=+ Ggr execute 'silent Ggrep!' <q-args> | cw | redraw!
nmap <leader>gl :Flog<CR>
nmap <leader>gb :Gblame<CR>

" Language server config
" rust LS
if executable('rust-analyzer')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'rust-analyzer',
        \ 'cmd': {server_info->['rust-analyzer']},
        \ 'whitelist': ['rust'],
        \})
elseif executable('rls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'rls',
        \ 'cmd': {server_info->['rls']},
        \ 'whitelist': ['rust'],
        \})
endif

" ruby LS
if executable('solargraph')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'solargraph',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
        \ 'whitelist': ['ruby'],
        \})
endif

let g:lsp_highlight_references_enabled = 1
let g:lsp_diagnostics_enabled = 0

function! s:on_lsp_buffer_enabled() abort
     setlocal omnifunc=lsp#complete
     setlocal signcolumn=yes
     nmap <buffer> gd <plug>(lsp-definition)
     nmap <buffer> <leader>si <plug>(lsp-implementation)
     nmap <buffer> <leader>sr <plug>(lsp-rename)
     nmap <buffer> <leader>sf <plug>(lsp-document-format)
     nmap <buffer> <leader>sh <plug>(lsp-hover)
     nmap <buffer> <leader>ss <plug>(lsp-references)
     nmap <buffer> <leader>st <plug>(lsp-type-definition)
endfunction

augroup lsp_install
     au!
     autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
