let mapleader = "\<Space>"
call plug#begin('~/.vim/plugged')
" Colorscheme
Plug 'morhetz/gruvbox'

" Automatically switch indent config
Plug 'tpope/vim-sleuth'

" Giiiiit
Plug 'airblade/vim-gitgutter'

" Tmux navigation!
Plug 'christoomey/vim-tmux-navigator'

" Automatically add end in ruby
Plug 'tpope/vim-endwise'

" Automatically add and delete pairs
Plug 'jiangmiao/auto-pairs'

" Fzf
if executable("fzf")
    Plug 'junegunn/fzf'
    Plug 'junegunn/fzf.vim'
endif

if has("nvim") && has("nvim-0.5.0")
  Plug 'nvim-lua/completion-nvim'
  Plug 'steelsojka/completion-buffers'
  Plug 'Shougo/neosnippet.vim'
  Plug 'Shougo/neosnippet-snippets'

  if (executable("clang") || executable("gcc")) && executable("git")
    Plug 'nvim-treesitter/nvim-treesitter'
    Plug 'nvim-treesitter/completion-treesitter'
  endif
  Plug 'neovim/nvim-lspconfig'
endif

call plug#end()

" General settings
behave xterm
syntax enable
set nocompatible
set autoindent
set smarttab
set textwidth=120
set expandtab
set nowrap
set showfulltag
set undolevels=1000
set history=200
set showmatch
set noswapfile
set backspace=indent,eol,start
set noautowrite
set nobackup
set ruler
set relativenumber
set number
set laststatus=2
set ignorecase
set whichwrap=b,s,h,l,<,>,[,]
set hlsearch
set foldmethod=indent
set foldlevel=99
set autoread
set smartindent

set encoding=utf-8
set termencoding=utf-8
set fileencodings=ucs-bom,ascii,utf-8,latin1

filetype on
filetype plugin on
filetype indent plugin on

" colorscheme
colorscheme gruvbox
set background=dark
if has("nvim")
  set termguicolors
endif

" transparency
hi Normal guibg=NONE ctermbg=NONE

" line limit column
set colorcolumn=80

" highlight current line
set cursorline

" show whitespaces / tabs
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+\%#\@<!$/

" Change cursor shape in different modes
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Netrw config
let g:netrw_banner = 0
let g:netrw_browse_split = 0

autocmd StdinReadPre * let s:std_in=1
" automatically open netrw when no file is specified
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Ex | endif
" automatically open netrw when opening a directory
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Ex | endif

" Make the cursor follow the split
set splitbelow
set splitright

" Git mappings
autocmd BufWritePost * GitGutter

" Fzf files
nmap <leader>ff :Files<CR>
" Fzf Tab Files
nmap <leader>ft :tabe<CR>:Files<CR>
" Fzf Ctags
nmap <leader>fc :BTags<CR>

" LSP helper function
function EnableLspSettings()
  if executable("rust-analyzer")
    lua <<EOF
    require'nvim_lsp'.rust_analyzer.setup{}
EOF
  endif

  if executable("solargraph")
    lua << EOF
    require'nvim_lsp'.solargraph.setup{}
EOF
  endif

  if executable("texlab")
    lua << EOF
    require'nvim_lsp'.texlab.setup{
      settings = {
        latex = {
          build = {
            onSave = true;
          };
          forwardSearch = {
            executable = "zathura";
            args = {"--synctex-forward", "%l:1:%f", "%p"};
          }
        }
      };
      commands = {
        ZathuraShow = {
            function()
              vim.lsp.buf_request(0, "textDocument/forwardSearch", vim.lsp.util.make_position_params(),
                function(err, _, _, _)
                  if err then error(tostring(err)) end
                end
              )
            end;
            description = "Show the current position in zathura";
        }
      }
    }
EOF
    " go zathura
    nnoremap <silent>gz <cmd>ZathuraShow<CR>
  endif

  if executable("pyls")
    lua << EOF
    require'nvim_lsp'.pyls.setup{}
EOF
  endif

  nnoremap <silent> gd <cmd>lua vim.lsp.buf.definition()<CR>
  " Overwrite fzf buffer ctags
  nnoremap <leader>fc <cmd>lua vim.lsp.buf.document_symbol()<CR>
  " go Workspace
  nnoremap <silent> gW <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
  " go references
  nnoremap <silent> gr <cmd>lua vim.lsp.buf.references()<CR>
  nnoremap <silent> K <cmd>lua vim.lsp.buf.hover()<CR>

  set pumheight=10
endfunction()

" enable nvim plugins
if has("nvim") && has("nvim-0.5.0")
  let g:completion_trigger_keyword_length = 1

  " nvim completion ignore casing
  let g:completion_matching_ignore_case = 1

  " use Neosnippet in my completion menu
  let g:completion_enable_snippet = 'Neosnippet'

  " trigger autocomplete on backspace as well
  let g:completion_trigger_on_delete = 1

  " Use <Tab> and <S-Tab> to navigate through popup menu
  inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

  " Set completeopt to have a better completion experience
  set completeopt=menuone,noinsert,noselect

  " Avoid showing message extra message when using completion
  set shortmess+=c

  " Jump to the next part of a snippet using C-k
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)

  " source completion
  autocmd BufEnter * lua require'completion'.on_attach()

  let g:completion_chain_complete_list = {
    \ 'default' : {
    \   'default': [
    \       {'complete_items': ['lsp', 'snippet', 'path']},
    \       {'mode': '<c-p>'},
    \       {'mode': '<c-n>'}],
    \   }
    \}

  if (executable("clang") || executable("gcc")) && executable("git")
    " config for nvim-treesitter
    lua <<EOF
    require'nvim-treesitter.configs'.setup {
      ensure_installed = false,
      highlight = {
        enable = true,
      },
    }
EOF
    call add(g:completion_chain_complete_list.default.default[0].complete_items, "ts")
  endif
  call EnableLspSettings()
endif
