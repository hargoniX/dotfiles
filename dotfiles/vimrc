call plug#begin('~/.vim/plugged')
" Autopairs
Plug 'tmsvg/pear-tree'

" Git diff in gutter
Plug 'airblade/vim-gitgutter'

" Colorscheme
Plug 'morhetz/gruvbox'

" Language server
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

" Tagbar
Plug 'majutsushi/tagbar'

" Rust plugin
Plug 'rust-lang/rust.vim', {'for': 'rust'}

" C plugin
Plug 'vim-scripts/c.vim', {'for': 'c'}

" Rails plugin
Plug 'tpope/vim-rails', {'for': 'ruby'}

" Status line
Plug 'vim-airline/vim-airline'

Plug 'Yggdroot/indentLine'
call plug#end()
" General settings
source ~/.vim/local-settings.vim
behave xterm
syntax enable

set autoindent
set textwidth=120
set shiftwidth=4
set softtabstop=4
set expandtab
set nowrap
set showfulltag
set undolevels=1000
set history=200
set showmatch
set noswapfile
set backspace=indent,eol,start
set noautowrite
set nobackup
set spelllang=en_us,de_de
set ruler
set relativenumber
set number
set laststatus=2
set noshowmode
filetype on
filetype plugin on
filetype indent plugin on

" disable arrow keys
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>


" gruvbox
colorscheme gruvbox
set background=dark

" transparency
hi Normal guibg=NONE ctermbg=NONE

" line limit column
set colorcolumn=80

" highlight current line
set cursorline

" show whitespaces / tabs
{%@@ if "dev" not in profile @@%}
" only on non dev servers as openbsd doesnt recognize these
set list
set listchars=tab:•\ ,trail:•,extends:»,precedes:«
{%@@ endif @@%}
" Change cursor shape in different modes
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Netrw config
let g:netrw_banner = 0
let g:netrw_browse_split = 1

autocmd StdinReadPre * let s:std_in=1
" automatically open netrw when no file is specified
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Ex | endif
" automatically open netrw when opening a directory
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Ex | endif

" open NERDTree on Ctrl + N
map <C-n> :Ex<CR>

" Tagbar
map <C-t> :TagbarToggle<CR>

" git gutter
autocmd BufWritePost * GitGutter

" Git gutter
let g:pear_tree_smart_openers = 1
let g:pear_tree_smart_closers = 1
let g:pear_tree_smart_backspace = 1

let g:airline_theme='gruvbox'
let g:airline_powerline_fonts = 1

if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

if executable('rls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'rls',
        \ 'cmd': {server_info->['rustup', 'run', 'stable', 'rls']},
        \ 'workspace_config': {'rust': {'clippy_preference': 'on'}},
        \ 'whitelist': ['rust'],
        \ })
endif

if executable('solargraph')
    " gem install solargraph
    au User lsp_setup call lsp#register_server({
        \ 'name': 'solargraph',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
        \ 'initialization_options': {"diagnostics": "true"},
        \ 'whitelist': ['ruby'],
        \ })
endif

let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_signs_error = {'text': 'X'}
let g:lsp_signs_warning = {'text': '>'}
let g:lsp_signs_hint = {'text': '>'}

" Tab completion
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

autocmd FileType ruby setlocal shiftwidth=2 softtabstop=2 expandtab
