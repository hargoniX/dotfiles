let mapleader = "\<Space>"
call plug#begin('~/.vim/plugged')
" Colorscheme
Plug 'arcticicestudio/nord-vim'

" Automatically switch indent config
Plug 'tpope/vim-sleuth'

" Giiiiit
Plug 'airblade/vim-gitgutter'

" Tmux navigation!
Plug 'christoomey/vim-tmux-navigator'

" Automatically add end in ruby
Plug 'tpope/vim-endwise'

" Automatically add and delete pairs
Plug 'jiangmiao/auto-pairs'

" Fzf
if executable("fzf")
    Plug 'junegunn/fzf'
    Plug 'junegunn/fzf.vim'
endif

if executable("tig")
    Plug 'iberianpig/tig-explorer.vim'
endif

if has('python3')
  if executable('cargo')
    Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next' }
  endif
  Plug 'Shougo/echodoc.vim'
  Plug 'Shougo/neosnippet.vim'
  Plug 'Shougo/neosnippet-snippets'

  if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
  endif
endif

call plug#end()

" General settings
behave xterm
syntax enable
set nocompatible
set autoindent
set smarttab
set textwidth=120
set expandtab
set nowrap
set showfulltag
set undolevels=1000
set history=200
set showmatch
set noswapfile
set backspace=indent,eol,start
set noautowrite
set nobackup
set ruler
set relativenumber
set number
set laststatus=2
set ignorecase
set whichwrap=b,s,h,l,<,>,[,]
set hlsearch
set foldmethod=indent
set foldlevel=99
set autoread
set smartindent

set encoding=utf-8
set termencoding=utf-8
set fileencodings=ucs-bom,ascii,utf-8,latin1

filetype on
filetype plugin on
filetype indent plugin on

" colorscheme
" colorscheme gruvbox
colorscheme nord

" transparency
hi Normal guibg=NONE ctermbg=NONE

" line limit column
set colorcolumn=80

" highlight current line
set cursorline

" show whitespaces / tabs
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+\%#\@<!$/

" Change cursor shape in different modes
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Netrw config
let g:netrw_banner = 0
let g:netrw_browse_split = 0

autocmd StdinReadPre * let s:std_in=1
" automatically open netrw when no file is specified
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Ex | endif
" automatically open netrw when opening a directory
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Ex | endif

" Make the cursor follow the split
set splitbelow
set splitright

" Git mappings
autocmd BufWritePost * GitGutter

" Just like ivy
nmap <C-x><C-f> :Files<CR>

" git grep
nmap <leader>gg :TigGrep<CR>
" git blame
nmap <leader>gb :TigBlame<CR>
" git status
nmap <leader>gs :TigStatus<CR>
" git log
nmap <leader>gl :Tig<CR>


let g:LanguageClient_serverCommands = {
    \ 'rust': ['rust-analyzer'],
    \ 'ruby': ['solargraph', 'stdio'],
    \ }

function EnableLspSettings()
  let g:LanguageClient_autoStart = 0
  nmap <leader>ss :LanguageClientStart<CR>
  nmap gd :call LanguageClient#textDocument_definition()<CR>
  nmap <leader>r :call LanguageClient#textDocument_rename()<CR>
  nmap <leader>lr :call LanguageClient#textDocument_references()<CR>
  nmap <leader>la :call LanguageClient#textDocument_codeAction()<CR>
  " symbol grep
  nmap <leader>sg :call LanguageClient_textDocument_documentSymbol()<CR>
  call deoplete#enable()
  call echodoc#enable()
  let g:neosnippet#enable_complete_done = 1
  set noshowmode
  set signcolumn=yes
  " So it doesn't request autocomplete all the time
  call deoplete#custom#option( {'auto_complete_delay': 150 })

  " C-k to expand
  " C-n and C-p to select
  " C-k to jump to the next field

  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
  " Tab completion for deoplete
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

endfunction()

augroup LSP
  autocmd!
  autocmd FileType rust,ruby,html call EnableLspSettings()
augroup END

